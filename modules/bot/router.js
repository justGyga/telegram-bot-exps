// eslint-disable-next-line import/no-extraneous-dependencies
import { Bot } from "grammy";
import { BOT_COMMANDS } from "./commands.js";
import Controller from "./controller.js";

const bot = new Bot(process.env.TG_API_TOKEN);

bot.api.setMyCommands([
    { command: BOT_COMMANDS.START, description: "Attach your account to tg" },
    { command: BOT_COMMANDS.ADD_SCHEDULE, description: "Send message in group after delay" }
]);

bot.use(Controller.addSessionToContext);

bot.command(BOT_COMMANDS.START, Controller.start);

bot.command(BOT_COMMANDS.ADD_SCHEDULE, async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.");
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏)
bot.on("message:text", async (ctx) => {
    console.log("-----CONFIG-------------");
    console.log(ctx.session);
    const messageText = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞)
    if (isDateValid(messageText)) {
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å.");
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        ctx.session.awaitingMedia = true;
    } else {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.");
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
bot.on("message", async (ctx) => {
    if (ctx.session.awaitingMedia) {
        if (ctx.message.photo) {
            await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ). –í–∞—à —Ñ–∞–π–ª –±—ã–ª –ø–æ–ª—É—á–µ–Ω!");
            ctx.session.awaitingMedia = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        } else if (ctx.message.video) {
            await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª (–≤–∏–¥–µ–æ). –í–∞—à —Ñ–∞–π–ª –±—ã–ª –ø–æ–ª—É—á–µ–Ω!");
            ctx.session.awaitingMedia = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        } else await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ).");
    }
});

bot.on("message_reaction", async (ctx) => {
    const { emojiAdded } = ctx.reactions();
    if (emojiAdded.includes("üéâ")) {
        await ctx.reply("partY");
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
function isDateValid(dateString) {
    const date = new Date(dateString);
    return !isNaN(date.getTime());
}

bot.catch(Controller.catchError);

export default bot;
